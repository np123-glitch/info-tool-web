@using Microsoft.Extensions.Options
@using ZoaReference.Features.Charts.Services
@using ZoaReference.Features.Charts.Models

@inject AviationApiChartService AviationApiChartService
@inject IOptionsMonitor<AppSettings> AppSettings
@inject ProtectedSessionStorage ProtectedSessionStore

@rendermode InteractiveServer
@page "/charts/{airportId?}"

<SectionContent SectionName="sub-nav">
    <div class="bg-slate-900 flex items-center gap-2 px-2 py-0.5 flex-wrap">
        @foreach (var airport in _airports)
        {
            <button class="@MakeAirportButtonClass(airport)" @onclick="() => UpdateCharts(airport.Id)">
                @if (airport.Id.Length == 4 && airport.Id.ToUpper().StartsWith("K"))
                {
                    @airport.Id[1..]
                }
                else
                {
                    @airport.Id
                }
            </button>
        }
        <button @onclick="ShowAirportInput">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5">
                <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"/>
            </svg>
        </button>
        @if (_airportInputShown)
        {
            <EditForm Model="@_airportForm" OnValidSubmit="@AirportSubmit">
                <DataAnnotationsValidator />
                <InputText @ref="_airportInputReference" @bind-Value="_airportForm!.AirportId" id="airportInput" class="uppercase bg-transparent border border-gray-500 focus:outline-none focus:bg-gray-700 p-0.5 w-24" placeholder="FAA/ICAO"/>
                <ValidationMessage For="() => _airportForm.AirportId"/>
            </EditForm>
        }
    </div>
</SectionContent>

<div class="flex grow">
    <div class="w-1/3">
        <div class="flex flex-wrap justify-start items-start">
            @foreach (var chart in _charts)
            {
                <button class="@MakeChartButtonClass(chart)" @onclick="() => UpdateDisplayedChart(chart)">@chart.ChartName</button>
            }
        </div>
    </div>
    <div class="w-2/3">
        @if (_displayedChart is not null)
        {
            @if (_displayedChart.Pages.Count > 1)
            {
                <div class="flex gap-2 items-center text-xs mb-3">
                    @foreach (var chartPage in _displayedChart.Pages.OrderBy(p => p.PageNumber))
                    {
                        <button class="@MakePageButtonClass(chartPage)" @onclick="() => UpdateDisplayedChartPage(chartPage)">@($"Pg. {chartPage.PageNumber}")</button>
                    }
                </div>
            }
            <object class="pt-1 w-full h-full" type="application/pdf" data="@_displayedChartPage?.PdfPath"></object>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? AirportId { get; set; }
    private string _airportId = "";
    
    private Chart? _displayedChart;
    private ChartPage? _displayedChartPage;
    
    private ICollection<Chart> _charts = new List<Chart>();
    private readonly List<Airport> _airports = new();

    private bool _airportInputShown = false;
    private readonly AirportForm _airportForm = new();
    private InputText? _airportInputReference;
    private class AirportForm
    {
        [Required]
        [StringLength(4, ErrorMessage = "ID cannot exceed 4 characters.")]
        public string AirportId { get; set; }
    }

    private async Task ShowAirportInput()
    {
        if (_airportInputShown) return;
        _airportInputShown = true;
    }
    
    private void AirportSubmit()
    {
        _airports.Add(new Airport(_airportForm.AirportId.ToUpper(), AirportType.Other));
        _airportInputShown = false;
        _airportForm.AirportId = "";
    }
    

    protected override async Task OnInitializedAsync()
    {
        _airportId = AirportId ?? string.Empty;
        if (!string.IsNullOrEmpty(_airportId))
        {
            await UpdateCharts(_airportId);
        }

        foreach (var airport in AppSettings.CurrentValue.ArtccAirports.Bravos)
        {
            _airports.Add(new Airport(airport, AirportType.Bravo));
        }
        foreach (var airport in AppSettings.CurrentValue.ArtccAirports.Charlies)
        {
            _airports.Add(new Airport(airport, AirportType.Charlie));
        }
        foreach (var airport in AppSettings.CurrentValue.ArtccAirports.Deltas)
        {
            _airports.Add(new Airport(airport, AirportType.Delta));
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AirportId is null)
        {
            var savedStateTask = await ProtectedSessionStore.GetAsync<ChartState>("chartState");
            if (!savedStateTask.Success || savedStateTask.Value is null)
            {
                return;
            }
            
            await UpdateCharts(savedStateTask.Value.AirportId);
            _displayedChart = savedStateTask.Value.Chart;
            _displayedChartPage = savedStateTask.Value.Page;
            StateHasChanged();
        }

        if (_airportInputShown && _airportInputReference?.Element is not null)
        {
            await _airportInputReference.Element.Value.FocusAsync();
        }
    }
    
    private async Task UpdateCharts(string id)
    {
        _airportId = id;
        var charts = await AviationApiChartService.GetChartsForId(id);
        _charts = charts.OrderBy(GetRankOrder).ToList();
    }

    private async Task UpdateDisplayedChart(Chart? chart)
    {
        if (chart is null) return;
        _displayedChart = chart;
        await UpdateDisplayedChartPage(chart.Pages.OrderBy(p => p.PageNumber).First());
    }

    private async Task UpdateDisplayedChartPage(ChartPage page)
    {
        _displayedChartPage = page;
        await ProtectedSessionStore.SetAsync("chartState", new ChartState(_airportId, _displayedChart, _displayedChartPage));
    }

    private string MakeChartButtonClass(Chart chart)
    {
        const string baseClass = "hover:bg-gray-700 border p-1 m-1 cursor-pointer text-xs w-32 h-12";
        var borderColor = chart.ChartCode switch 
        {
            "APD" => "border-green-500",
            "MIN" => "border-orange-500",
            "LAH" => "border-yellow-500",
            "HOT" => "border-red-500",
            "STAR" => "border-sky-500",
            "IAP" => "border-violet-500",
            "DP" => "border-pink-500",
            _ => "border-gray-600"
        };
        var isSelected = (_displayedChart?.ChartName == chart.ChartName && _displayedChart?.AirportName == chart.AirportName) ? "bg-gray-700 font-bold" : "";

        return string.Join(" ", baseClass, borderColor, isSelected);
    }
    
    private string MakePageButtonClass(ChartPage page)
    {
        const string baseClass = "hover:bg-gray-700 border border-gray-600 p-1 m-1 cursor-pointer";
        var isSelected = (page.PdfPath == _displayedChartPage?.PdfPath) ? "bg-gray-700 font-bold" : "";
        return string.Join(" ", baseClass, isSelected);
    }

    private enum AirportType
    {
        Bravo,
        Charlie,
        Delta,
        Other
    }

    private record struct Airport(string Id, AirportType Type);

    private string MakeAirportButtonClass(Airport airport)
    {
        const string baseClass = "p-1";
        var textColor = airport.Type switch
        {
            AirportType.Bravo => "text-orange-500",
            AirportType.Charlie => "text-sky-400",
            AirportType.Delta => "text-gray-300",
            _ => "text-red-300"
        };
        var isSelected = airport.Id == _airportId ? "underline decoration-2 underline-offset-4 bg-gray-700" : "";
        return string.Join(" ", baseClass, textColor, isSelected);
    }

    private class ChartState(string airportId, Chart? chart, ChartPage? page)
    {
        public string AirportId { get; } = airportId;
        public Chart? Chart { get; } = chart;
        public ChartPage? Page { get; } = page;
    }

    private static int GetRankOrder(Chart chart)
    {
        return chart.ChartCode switch
        {
            "APD" => 0,
            "MIN" => 1,
            "LAH" => 2,
            "HOT" => 3,
            "STAR" => 4,
            "IAP" => 5,
            "DP" => 6,
            _ => 7
        };
    }
}
