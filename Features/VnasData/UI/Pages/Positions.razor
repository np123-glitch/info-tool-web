@page "/positions"
@using ZmaReference.Features.VnasData.Models
@using ZmaReference.Features.VnasData.Services
@rendermode InteractiveServer

@inject CachedVnasDataService VnasData
@inject IJSRuntime Js

<PageTitle>Positions - ZMA Reference</PageTitle>

<input @ref="@_input"
       class="bg-transparent border border-gray-500 focus:outline-none focus:bg-gray-700 p-0.5  mb-2 ml-1 w-40"
       type="text" @bind="_filterText" @bind:event="oninput" placeholder="Search"/>
<div class="text-s">
    <QuickGrid Items="@FilteredPositions">
        <PropertyColumn Property="@(p => p.Name)" Sortable="true"/>
        <PropertyColumn Property="@(p => p.Callsign)" Sortable="true"/>
        <PropertyColumn Property="@(p => p.RadioName)" Sortable="true"/>
        <TemplateColumn Title="Frequency" SortBy="@_sortByFreq">
            @(FreqToString(context.Frequency))
        </TemplateColumn>
    </QuickGrid>
</div>

@code {
    private ICollection<Position> _positions = new List<Position>();
    private IQueryable<Position> PositionsQueryable => _positions.AsQueryable();

    private IQueryable<Position> FilteredPositions
    {
        get { return PositionsQueryable.Where(p => ContainsFilterString(p, _filterText)); }
    }

    private string _filterText = "";

    private readonly GridSort<Position> _sortByFreq = GridSort<Position>
        .ByAscending(p => p.Frequency);

    private ElementReference _input;

    protected override async Task OnInitializedAsync()
    {
        var fetchedFacilities = await VnasData.GetArtccFacilities("ZMA");
        _positions = fetchedFacilities.SelectMany(f => f.Facility.Positions).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("SetFocusToElement", _input);
        }
    }

    private static string FreqToString(int freq)
    {
        var str = freq.ToString();
        return $"{str[..3]}.{str[3..6]}";
    }

    private static bool ContainsFilterString(Position p, string s)
    {
        return string.IsNullOrEmpty(s)
               || p.Name.Contains(s, StringComparison.OrdinalIgnoreCase)
               || p.Callsign.Contains(s, StringComparison.OrdinalIgnoreCase)
               || p.RadioName.Contains(s, StringComparison.OrdinalIgnoreCase)
               || FreqToString(p.Frequency).Contains(s, StringComparison.OrdinalIgnoreCase);
    }

}